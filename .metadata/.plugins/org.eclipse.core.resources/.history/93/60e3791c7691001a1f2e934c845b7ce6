package pt.unl.fct.di.apdc.firstwebapp.resources;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.Query;
import com.google.cloud.datastore.QueryResults;
import com.google.cloud.datastore.StructuredQuery.CompositeFilter;
import com.google.cloud.datastore.StructuredQuery.OrderBy;
import com.google.cloud.datastore.StructuredQuery.PropertyFilter;
import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.PathElement;
import com.google.cloud.datastore.Transaction;
import com.google.gson.Gson;

import pt.unl.fct.di.apdc.firstwebapp.accessControl.AccessControl;
import pt.unl.fct.di.apdc.firstwebapp.util.AuthToken;
import pt.unl.fct.di.apdc.firstwebapp.util.LoginData;
import pt.unl.fct.di.apdc.firstwebapp.util.UserRole;

@Path("/")
@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
public class LoginResource
{

	/**
	 * Logger Object
	 */
	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore = DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKeyFactory = datastore.newKeyFactory().setKind("User");

	private final Gson g = new Gson();

	private AccessControl control = new AccessControl();

	public LoginResource()
	{
	}

	@POST
	@Path("/login")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLogin(LoginData data)
	{

		LOG.fine("Attempt to login user: " + data.username);

		// Keys Generated Outside Transactions
		Key userKey = userKeyFactory.newKey(data.username);

		Transaction txn = datastore.newTransaction();
		try
		{
			Entity user = txn.get(userKey);
			if (user == null)
			{
				// Username does not exist
				LOG.warning("Failed login attempt for username: " + data.username);
				txn.rollback();
				return Response.status(Status.FORBIDDEN).build();
			}

			String hashedPWD = user.getString("user_pwd");
			if (!hashedPWD.equals(DigestUtils.sha512Hex(data.password)))
			{
				// Incorrect password
				LOG.warning("Wrong password for username: " + data.username);
				return Response.status(Status.FORBIDDEN).build();
			}

			// Verify if user can login
			if (!control.canLogin(data.username))
			{
				LOG.fine("User '" + data.username + "' has no login privileges");
				txn.rollback();
				return Response.status(Status.FORBIDDEN).entity("Account disabled, can not login").build();
			}

			AuthToken token = control.createToken(data.username);

			if (token == null)
			{
				txn.rollback();
				LOG.info("Error: Token was not created");
				return Response.status(Status.INTERNAL_SERVER_ERROR).build();
			}

			// only commit if token is ok
			txn.commit();

			LOG.info("User '" + data.username + "' logged in sucessfully.");
			return Response.ok(g.toJson(token)).build();

		} catch (Exception e)
		{
			txn.rollback();
			LOG.severe(e.getMessage());
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		} finally
		{
			if (txn.isActive())
			{
				txn.rollback();
				return Response.status(Status.INTERNAL_SERVER_ERROR).build();
			}
		}

	}
	
	@POST
	@Path("/logout")
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLogout(AuthToken token)
	{
		LOG.fine("Attempt to logout, username : '" + token.username + "'");

		
		if (!control.validateToken(token))
		{
			LOG.fine("Token is not valid, username : '" + token.username + "'");
			return Response.status(Status.FORBIDDEN).entity("Invalid token").build();
		}

		control.invalidateToken(token);
		return Response.ok("{}").build();
	}

	@GET
	@Path("/isAvaiable/{username}")
	public Response checkUsernameAvailable(@PathParam("username") String username)
	{

		Key userKey = userKeyFactory.newKey(username);

		Entity user = datastore.get(userKey);

		if (user == null)
		{
			return Response.ok(true).build();
		} else
		{
			return Response.ok(false).build();
		}

	}

}
