package pt.unl.fct.di.apdc.firstwebapp.resources;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Logger;

import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.Context;
import javax.ws.rs.core.HttpHeaders;
import javax.ws.rs.core.MediaType;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.apache.commons.codec.digest.DigestUtils;

import com.google.cloud.datastore.Key;
import com.google.cloud.datastore.Query;
import com.google.cloud.datastore.QueryResults;
import com.google.cloud.datastore.StructuredQuery.CompositeFilter;
import com.google.cloud.datastore.StructuredQuery.OrderBy;
import com.google.cloud.datastore.StructuredQuery.PropertyFilter;
import com.google.cloud.Timestamp;
import com.google.cloud.datastore.Datastore;
import com.google.cloud.datastore.DatastoreOptions;
import com.google.cloud.datastore.Entity;
import com.google.cloud.datastore.KeyFactory;
import com.google.cloud.datastore.PathElement;
import com.google.cloud.datastore.Transaction;
import com.google.gson.Gson;

import pt.unl.fct.di.apdc.firstwebapp.accessControl.AccessControl;
import pt.unl.fct.di.apdc.firstwebapp.util.AuthToken;
import pt.unl.fct.di.apdc.firstwebapp.util.LoginData;
import pt.unl.fct.di.apdc.firstwebapp.util.UserRole;

@Path("/login")
@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
public class LoginResource
{

	/**
	 * Logger Object
	 */
	private static final Logger LOG = Logger.getLogger(LoginResource.class.getName());
	private final Datastore datastore = DatastoreOptions.getDefaultInstance().getService();
	private final KeyFactory userKeyFactory = datastore.newKeyFactory().setKind("User");

	private final Gson g = new Gson();

	private AccessControl control = new AccessControl();

	public LoginResource()
	{
	}

	@POST
	@Consumes(MediaType.APPLICATION_JSON)
	public Response doLogin4(LoginData data)
	{

		LOG.fine("Attempt to login user: " + data.username);

		// Keys Generated Outside Transactions
		Key userKey = userKeyFactory.newKey(data.username);

		Key firstLoginKey = datastore.newKeyFactory().addAncestor(PathElement.of("User", data.username))
				.setKind("UserStatsFiL").newKey("firstLogin");

		Key loginCounterKey = datastore.newKeyFactory().addAncestor(PathElement.of("User", data.username))
				.setKind("UserStatsLC").newKey("loginStat");

		Key failedLoginKey = datastore.newKeyFactory().addAncestor(PathElement.of("User", data.username))
				.setKind("UserStatsFaL").newKey("failedLogin");

		// Generate automatically a key
		Key logKey = datastore.allocateId(datastore.newKeyFactory().addAncestor(PathElement.of("User", data.username))
				.setKind("UserLog").newKey());

		Transaction txn = datastore.newTransaction();
		try
		{
			Entity user = txn.get(userKey);
			if (user == null)
			{
				// Username does not exist
				LOG.warning("Failed login attempt for username: " + data.username);
				txn.rollback();
				return Response.status(Status.FORBIDDEN).build();
			}

			Entity failedLogin = txn.get(failedLoginKey);
			if (failedLogin == null)
			{
				failedLogin = Entity.newBuilder(failedLoginKey).set("user_stats_failed", 0L).build();
			}

			String hashedPWD = user.getString("user_pwd");
			if (hashedPWD.equals(DigestUtils.sha512Hex(data.password)))
			{
				// Password is correct
				// Contruct the logs

				// _______________________________________________
				// Verify if user can login
				if (!control.canLogin(data.username))
				{
					LOG.fine("User '" + data.username + "' has no login privileges");
					txn.rollback();
					return Response.status(Status.FORBIDDEN).entity("Account disable, can not login").build();
				}

				Entity firstLogin = txn.get(firstLoginKey);
				if (firstLogin == null)
				{
					firstLogin = Entity.newBuilder(firstLoginKey).set("user_first_login", Timestamp.now()).build();

					txn.add(firstLogin);
				}

				Entity loginCounter = txn.get(loginCounterKey);
				if (loginCounter == null)
				{
					loginCounter = Entity.newBuilder(loginCounterKey).set("user_stats_logins", 0L)
							.set("user_last_login", Timestamp.now()).build();
				}

				Entity uLoginCounter = Entity.newBuilder(loginCounterKey)
						.set("user_stats_logins", 1L + loginCounter.getLong("user_stats_logins"))
						.set("user_last_login", Timestamp.now()).build();

				Entity uFailedLogin = Entity.newBuilder(failedLoginKey).set("user_stats_failed", 0L).build();

				Entity log = Entity.newBuilder(logKey).set("user_login_ip", request.getRemoteAddr())
						.set("user_login_host", request.getRemoteHost())
						.set("user_login_latlon", headers.getHeaderString("X-AppEngine-CityLatLong"))
						.set("user_login_city", headers.getHeaderString("X-AppEngine-City"))
						.set("user_login_country", headers.getHeaderString("X-AppEngine-Country"))
						.set("user_login_time", Timestamp.now()).build();

				txn.put(log, uLoginCounter, uFailedLogin);

				AuthToken token = control.createToken(data.username);

				if (token == null)
				{
					txn.rollback();
					LOG.info("Error: Token was not created");
					return Response.status(Status.INTERNAL_SERVER_ERROR).build();
				}

				// only commit if token is ok
				txn.commit();

				LOG.info("User '" + data.username + "' logged in sucessfully.");
				return Response.ok(g.toJson(token)).build();

			} else
			{
				// Incorrect password

				Entity uFailedLogin = Entity.newBuilder(failedLoginKey)
						.set("user_stats_failed", 1L + failedLogin.getLong("user_stats_failed")).build();

				txn.put(uFailedLogin);
				txn.commit();
				LOG.warning("Wrong password for username: " + data.username);
				return Response.status(Status.FORBIDDEN).build();
			}
		} catch (Exception e)
		{
			txn.rollback();
			LOG.severe(e.getMessage());
			return Response.status(Status.INTERNAL_SERVER_ERROR).build();
		} finally
		{
			if (txn.isActive())
			{
				txn.rollback();
				return Response.status(Status.INTERNAL_SERVER_ERROR).build();
			}
		}

	}

	@GET
	@Path("/isAvaiable/{username}")
	public Response checkUsernameAvailable(@PathParam("username") String username)
	{

		Key userKey = userKeyFactory.newKey(username);

		Entity user = datastore.get(userKey);

		if (user == null)
		{
			return Response.ok(true).build();
		} else
		{
			return Response.ok(false).build();
		}

	}

	@POST
	@Path("/lastLogins/{username}")
	@Consumes(MediaType.APPLICATION_JSON)
	@Produces(MediaType.APPLICATION_JSON + ";charset=utf-8")
	public Response checkLoginLastDay(@PathParam("username") String username, AuthToken token)
	{

		if (!control.validateToken(token))
		{
			LOG.fine("Token not valid, from : '" + token.username + "'");
			return Response.status(Status.FORBIDDEN).entity("Token is not valid").build();
		}

		// if not getting info about own account, need permissions
		if (!username.equals(token.username))
		{
			UserRole[] roles = { UserRole.GS, UserRole.SU };
			if (!control.validatePermission(token.username, roles))
			{
				return Response.status(Status.FORBIDDEN)
						.entity("User has no permissions to see logins from other accounts").build();
			}
		}

		// Get the date of yesterday
		Calendar cal = Calendar.getInstance();
		cal.add(Calendar.DATE, -1);
		Timestamp yesterday = Timestamp.of(cal.getTime());

		Query<Entity> query = Query.newEntityQueryBuilder().setKind("UserLog")
				.setFilter(CompositeFilter.and(
						PropertyFilter.hasAncestor(datastore.newKeyFactory().setKind("User").newKey(username)),
						PropertyFilter.ge("user_login_time", yesterday)))
				.setOrderBy(OrderBy.desc("user_login_time")).setLimit(3).build();

		QueryResults<Entity> logs = datastore.run(query);

		List<Date> loginDates = new ArrayList<Date>();
		logs.forEachRemaining(userlog -> {
			loginDates.add(userlog.getTimestamp("user_login_time").toDate());
		});

		return Response.ok(g.toJson(loginDates)).build();

	}

}
